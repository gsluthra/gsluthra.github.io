<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quality on life-lessons.in</title>
    <link>/tags/quality/</link>
    <description>Recent content in quality on life-lessons.in</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Gurpreet Luthra 2021</copyright>
    <lastBuildDate>Fri, 10 Jan 2014 02:13:50 +0000</lastBuildDate><atom:link href="/tags/quality/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Using Capybara and Rspec assertions in Page Objects</title>
      <link>/2014/01/10/using-capybara-and-rspec/</link>
      <pubDate>Fri, 10 Jan 2014 02:13:50 +0000</pubDate>
      
      <guid>/2014/01/10/using-capybara-and-rspec/</guid>
      <description>Near the Norbulingka Institute, Dharamshala, India   On my Rails project, I am using RSpec and Capybara to write functional tests.
I did not want to specify any HTML elements in my Capybara feature files, since that makes the feature files brittle to HTML / CSS changes. It also violates the DRY principle and basic code hygiene.
Read the full blog on my older blog site here: Using Capybara and Rspec assertions in Page Objects</description>
    </item>
    
    <item>
      <title>Recommended Reading for Lateral Dev Hires at ThoughtWorks</title>
      <link>/2012/07/29/recommended-reading-for-devs-thoughtworks/</link>
      <pubDate>Sun, 29 Jul 2012 02:13:50 +0000</pubDate>
      
      <guid>/2012/07/29/recommended-reading-for-devs-thoughtworks/</guid>
      <description>ThoughtWorks Tech Radar - Times Square   Quite often experienced folks joining ThoughtWorks have a common set of questions: What should I read to prepare myself for ThoughtWorks? What kind of technologies does ThoughtWorks work on? Will I go on a Ruby or Java or Mobile project?
I doubt there is any good and precise answer to these questions. But, there certainly are some practices that I feel our in the DNA of ThoughtWorks.</description>
    </item>
    
    <item>
      <title>POKA YOKE - Applying Mistake Proofing to Software</title>
      <link>/2012/07/22/poke-yoke-mistake-proofing-software/</link>
      <pubDate>Sun, 22 Jul 2012 02:13:50 +0000</pubDate>
      
      <guid>/2012/07/22/poke-yoke-mistake-proofing-software/</guid>
      <description>Near the Norbulingka Institute, Dharamshala, India   Note: This has been one of my highest read blog posts ever with over 100,000 views. I am humbled. Thank you!
For years, automobile companies have utilized &amp;ldquo;Mistake Proofing&amp;rdquo; as a technique for ensuring high quality, high speed manufacturing &amp;ndash; especially in cases of mass scale production. This is also known as Poka-Yoke (in Japanese) and was adopted and formalized as part of the Toyota Production System.</description>
    </item>
    
  </channel>
</rss>
